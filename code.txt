The following is a digest of the repository "meta-frontend-capstone".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: meta-frontend-capstone
Files Analyzed: 34
Total Text Size: 113.21 KB
Estimated Tokens (text only): ~27,775

--- DIRECTORY STRUCTURE ---
meta-frontend-capstone/
├── src/
│   ├── assets/
│   │   └── react.svg
│   ├── components/
│   │   ├── api/
│   │   │   ├── getWeeksSpecials.js
│   │   │   └── submitBooking.js
│   │   ├── pages/
│   │   │   ├── home.jsx
│   │   │   ├── order-online.jsx
│   │   │   └── reservation.jsx
│   │   ├── re-use/
│   │   │   ├── app-sidebar.jsx
│   │   │   └── under-construction.jsx
│   │   └── ui/
│   │       ├── badge.jsx
│   │       ├── breadcrumb.jsx
│   │       ├── button.jsx
│   │       ├── card.jsx
│   │       ├── dialog.jsx
│   │       ├── input.jsx
│   │       ├── label.jsx
│   │       ├── select.jsx
│   │       ├── separator.jsx
│   │       ├── sheet.jsx
│   │       ├── sidebar.jsx
│   │       ├── skeleton.jsx
│   │       ├── textarea.jsx
│   │       └── tooltip.jsx
│   ├── hooks/
│   │   └── use-mobile.js
│   ├── App.css
│   ├── App.jsx
│   ├── index.css
│   └── main.jsx
├── components.json
├── eslint.config.js
├── jsconfig.app.json
├── jsconfig.json
├── package.json
├── README.md
└── vite.config.js


--- FILE CONTENTS ---
============================================================
FILE: src/assets/react.svg
============================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

============================================================
FILE: src/components/api/getWeeksSpecials.js
============================================================
export const getWeeksSpecials = async () => {
  await new Promise((resolve) => setTimeout(resolve, 800));

  const specials = [
    {
      id: 1,
      name: "Greek Salad",
      price: 12.99,
      rating: 4.9,
      prepTime: "15-20 min",
      image: "/images/greek-salad.jpg",
      description:
        "The famous Greek salad of crispy lettuce, peppers, olives and our Chicago style feta cheese, garnished with crunchy garlic and rosemary croutons.",
    },
    {
      id: 2,
      name: "Bruschetta",
      price: 5.99,
      rating: 4.8,
      prepTime: "10-15 min",
      image: "/images/restaurant-food.jpg",
      description:
        "Our Bruschetta is made from grilled bread that has been smeared with garlic and seasoned with salt and olive oil. Topped with fresh tomatoes and basil.",
    },
    {
      id: 3,
      name: "Lemon Dessert",
      price: 5.0,
      rating: 5.0,
      prepTime: "5-10 min",
      image: "/images/lemon-dessert.jpg",
      description:
        "This comes straight from grandma's recipe book, every last ingredient has been sourced and is as authentic as can be imagined. A perfect end to your meal.",
    },
  ];

  return {
    success: true,
    data: specials,
    message: "Week's specials loaded successfully",
  };
};

export default getWeeksSpecials;


============================================================
FILE: src/components/api/submitBooking.js
============================================================
export const submitBooking = async (bookingData) => {
  await new Promise((resolve) => setTimeout(resolve, 5000));

  const { date, time, guests, name, email, phone } = bookingData;

  if (!date || !time || !guests || !name || !email || !phone) {
    return {
      success: false,
      message: "Please fill in all required fields",
    };
  }

  const isSuccessful = Math.random() > 0.1;

  if (isSuccessful) {
    const reservationId = `RES-${Date.now()}`;

    return {
      success: true,
      message: "Reservation booked successfully!",
      reservationId: reservationId,
      details: {
        name: name,
        date: date,
        time: time,
        guests: guests,
      },
    };
  } else {
    return {
      success: false,
      message:
        "Sorry, this time slot is not available. Please try a different time.",
    };
  }
};

export default submitBooking;


============================================================
FILE: src/components/pages/home.jsx
============================================================
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Star,
  MapPin,
  Phone,
  Mail,
  Facebook,
  Instagram,
  Twitter,
  Clock,
} from "lucide-react";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Separator } from "@/components/ui/separator";
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import { AppSidebar } from "../re-use/app-sidebar";
import { getWeeksSpecials } from "../api/getWeeksSpecials";

export default function HomePage() {
  const [specials, setSpecials] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchSpecials = async () => {
      try {
        const result = await getWeeksSpecials();
        if (result.success) {
          setSpecials(result.data);
        }
      } catch (error) {
        console.error("Failed to fetch specials:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchSpecials();
  }, []);
  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <header className='flex h-16 shrink-0 items-center gap-2 border-b bg-background px-4'>
          <SidebarTrigger className='-ml-1' />
          <Separator orientation='vertical' className='mr-2 h-4' />
          <Breadcrumb>
            <BreadcrumbList>
              <BreadcrumbItem className='hidden md:block'>
                <BreadcrumbLink href='#'>Little Lemon</BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator className='hidden md:block' />
              <BreadcrumbItem>
                <BreadcrumbPage>Home</BreadcrumbPage>
              </BreadcrumbItem>
            </BreadcrumbList>
          </Breadcrumb>
        </header>

        <main className='flex-1'>
          <section
            id='home'
            className='bg-gradient-to-br from-primary/20 to-secondary/10 py-16 lg:py-24'
          >
            <div className='container mx-auto px-4'>
              <div className='grid grid-cols-1 lg:grid-cols-2 gap-12 items-center'>
                <div>
                  <h1 className='text-4xl lg:text-6xl font-bold mb-4 text-foreground'>
                    Little Lemon
                  </h1>
                  <p className='text-xl lg:text-2xl text-secondary mb-6 font-semibold'>
                    Chicago
                  </p>
                  <p className='text-lg mb-8 leading-relaxed text-muted-foreground'>
                    We are a family owned Mediterranean restaurant, focused on
                    traditional recipes served with a modern twist. Experience
                    authentic flavors crafted with love and the finest
                    ingredients in the heart of Chicago.
                  </p>
                  <Button
                    size='lg'
                    className='bg-primary hover:bg-primary/90 text-primary-foreground font-semibold px-8 py-4 text-lg shadow-lg'
                  >
                    Reserve a Table
                  </Button>
                </div>
                <div className='flex justify-center'>
                  <div className='relative'>
                    <img
                      src='/images/restaurant-chef.jpg'
                      alt='Little Lemon chef preparing fresh dishes'
                      className='rounded-lg shadow-2xl w-full max-w-md object-cover h-96'
                    />
                    <div className='absolute -bottom-4 -right-4 bg-primary text-primary-foreground p-4 rounded-lg shadow-lg'>
                      <div className='flex items-center gap-1'>
                        {[...Array(5)].map((_, i) => (
                          <Star key={i} className='w-4 h-4 fill-current' />
                        ))}
                      </div>
                      <p className='text-sm font-semibold mt-1'>5.0 Rating</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
          <section id='menu' className='py-20 lg:py-28 bg-background'>
            <div className='container mx-auto px-4'>
              <div className='text-center mb-16'>
                <h2 className='text-4xl lg:text-6xl font-bold text-foreground mb-6'>
                  This Week's Specials!
                </h2>
                <p className='text-xl text-muted-foreground max-w-3xl mx-auto mb-8'>
                  Discover our chef's carefully curated selection of
                  Mediterranean favorites, made fresh daily with the finest
                  ingredients.
                </p>
              </div>

              <div className='grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto'>
                {isLoading
                  ? [...Array(3)].map((_, index) => (
                      <Card
                        key={index}
                        className='overflow-hidden shadow-xl border-0 bg-card'
                      >
                        <div className='relative'>
                          <Skeleton className='aspect-[4/3] w-full' />
                        </div>
                        <CardContent className='p-8'>
                          <div className='mb-4'>
                            <Skeleton className='h-8 w-3/4 mb-2' />
                            <div className='flex items-center gap-2 mb-4'>
                              <Skeleton className='h-4 w-20' />
                              <Skeleton className='h-4 w-12' />
                            </div>
                          </div>
                          <Skeleton className='h-20 w-full mb-6' />
                          <div className='flex items-center justify-between'>
                            <Skeleton className='h-4 w-20' />
                            <Skeleton className='h-10 w-24' />
                          </div>
                        </CardContent>
                      </Card>
                    ))
                  : specials.map((special) => (
                      <Card
                        key={special.id}
                        className='group overflow-hidden shadow-xl border-0 bg-card hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2'
                      >
                        <div className='relative overflow-hidden'>
                          <div className='aspect-[4/3] overflow-hidden'>
                            <img
                              src={special.image}
                              alt={special.name}
                              className='w-full h-full object-cover transition-transform duration-500 group-hover:scale-110'
                            />
                          </div>
                          <div className='absolute top-4 right-4'>
                            <Badge className='bg-primary text-primary-foreground font-bold text-lg px-4 py-2 shadow-lg'>
                              ${special.price}
                            </Badge>
                          </div>
                          <div className='absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300' />
                        </div>

                        <CardContent className='p-8'>
                          <div className='mb-4'>
                            <CardTitle className='text-2xl font-bold text-foreground mb-2 group-hover:text-primary transition-colors duration-300'>
                              {special.name}
                            </CardTitle>
                            <div className='flex items-center gap-2 mb-4'>
                              <div className='flex'>
                                {[...Array(5)].map((_, i) => (
                                  <Star
                                    key={i}
                                    className={`w-4 h-4 ${
                                      i < Math.floor(special.rating)
                                        ? "fill-primary text-primary"
                                        : "text-muted-foreground"
                                    }`}
                                  />
                                ))}
                              </div>
                              <span className='text-sm text-muted-foreground'>
                                ({special.rating})
                              </span>
                            </div>
                          </div>

                          <CardDescription className='text-muted-foreground text-base leading-relaxed mb-6'>
                            {special.description}
                          </CardDescription>

                          <div className='flex items-center justify-between'>
                            <div className='flex items-center gap-2 text-sm text-muted-foreground'>
                              <Clock className='w-4 h-4' />
                              <span>{special.prepTime}</span>
                            </div>
                            <Button className='bg-secondary hover:bg-secondary/90 text-secondary-foreground font-semibold px-6 py-2 shadow-md hover:shadow-lg transition-all duration-300'>
                              Order Now 🛵
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
              </div>
            </div>
          </section>

          <section id='testimonials' className='py-16 lg:py-24 bg-muted/30'>
            <div className='container mx-auto px-4'>
              <h2 className='text-3xl lg:text-5xl font-bold text-center text-foreground mb-12'>
                Testimonials
              </h2>
              <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6'>
                {[
                  {
                    name: "Sarah M",
                    rating: 5,
                    review:
                      "Amazing food and great service! The Greek salad was fresh and delicious.",
                  },
                  {
                    name: "John D",
                    rating: 5,
                    review:
                      "Best Mediterranean restaurant in Chicago. Highly recommend the bruschetta!",
                  },
                  {
                    name: "Maria L",
                    rating: 5,
                    review:
                      "The lemon dessert is to die for. Perfect ending to a wonderful meal.",
                  },
                  {
                    name: "David K",
                    rating: 5,
                    review:
                      "Authentic flavors and cozy atmosphere. Will definitely be coming back!",
                  },
                ].map((testimonial, index) => (
                  <Card
                    key={index}
                    className='text-center shadow-lg border-2 hover:border-primary transition-all duration-300 hover:shadow-xl'
                  >
                    <CardHeader>
                      <div className='flex justify-center mb-4'>
                        {[...Array(testimonial.rating)].map((_, i) => (
                          <Star
                            key={i}
                            className='w-5 h-5 fill-primary text-primary'
                          />
                        ))}
                      </div>
                      <div className='w-16 h-16 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center'>
                        <span className='text-primary-foreground font-bold text-xl'>
                          {testimonial.name.charAt(0)}
                        </span>
                      </div>
                      <CardTitle className='text-lg font-bold'>
                        {testimonial.name}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <CardDescription className='text-muted-foreground text-base'>
                        "{testimonial.review}"
                      </CardDescription>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </section>

          <section id='about' className='py-16 lg:py-24 bg-background'>
            <div className='container mx-auto px-4'>
              <div className='grid grid-cols-1 lg:grid-cols-2 gap-12 items-center'>
                <div>
                  <h2 className='text-3xl lg:text-5xl font-bold text-foreground mb-4'>
                    Little Lemon
                  </h2>
                  <p className='text-xl lg:text-2xl text-secondary mb-6 font-semibold'>
                    Chicago
                  </p>
                  <p className='text-muted-foreground leading-relaxed text-lg mb-6'>
                    Based in Chicago, Illinois, Little Lemon is a family-owned
                    Mediterranean restaurant, focused on traditional recipes
                    served with a modern twist. The chefs draw inspiration from
                    Italian, Greek, and Turkish culture and have a menu of 12–15
                    items that they rotate seasonally.
                  </p>
                  <p className='text-muted-foreground leading-relaxed text-lg'>
                    Founded by Adrian and Mario, Little Lemon brings authentic
                    Mediterranean flavors to Chicago with a modern twist. Every
                    dish is crafted with love and the finest ingredients,
                    creating an unforgettable dining experience for our guests.
                  </p>
                </div>
                <div className='flex justify-center'>
                  <img
                    src='/images/mario-adrian-b.jpg'
                    alt='Mario and Adrian, the founders of Little Lemon restaurant'
                    className='rounded-lg shadow-2xl w-full max-w-md object-cover h-96'
                  />
                </div>
              </div>
            </div>
          </section>

          <section className='py-16 lg:py-24 bg-muted/30'>
            <div className='container mx-auto px-4'>
              <div className='text-center mb-12'>
                <h2 className='text-3xl lg:text-5xl font-bold text-foreground mb-4'>
                  Our Restaurant
                </h2>
                <p className='text-lg text-muted-foreground max-w-2xl mx-auto'>
                  Experience the warm and inviting atmosphere of Little Lemon,
                  where Mediterranean charm meets modern elegance.
                </p>
              </div>
              <div className='flex justify-center'>
                <img
                  src='/images/restaurant-interior.jpg'
                  alt='Beautiful interior of Little Lemon restaurant with outdoor terrace'
                  className='rounded-lg shadow-2xl w-full max-w-4xl object-cover h-96'
                />
              </div>
            </div>
          </section>

          <footer id='contact' className='bg-foreground text-background py-12'>
            <div className='container mx-auto px-4'>
              <div className='grid grid-cols-1 md:grid-cols-4 gap-8'>
                <div>
                  <div className='flex items-center gap-3 mb-4'>
                    <div>
                      <div className='font-bold text-primary text-xl'>
                        Little Lemon
                      </div>
                      <div className='text-sm text-muted'>
                        Chicago Restaurant
                      </div>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className='text-lg font-semibold mb-4 text-primary'>
                    Navigation
                  </h3>
                  <ul className='space-y-2'>
                    <li>
                      <a
                        href='#home'
                        className='text-muted hover:text-primary transition-colors'
                      >
                        Home
                      </a>
                    </li>
                    <li>
                      <a
                        href='#about'
                        className='text-muted hover:text-primary transition-colors'
                      >
                        About
                      </a>
                    </li>
                    <li>
                      <a
                        href='#menu'
                        className='text-muted hover:text-primary transition-colors'
                      >
                        Menu
                      </a>
                    </li>
                    <li>
                      <a
                        href='#reservations'
                        className='text-muted hover:text-primary transition-colors'
                      >
                        Reservations
                      </a>
                    </li>
                    <li>
                      <a
                        href='#order'
                        className='text-muted hover:text-primary transition-colors'
                      >
                        Order Online
                      </a>
                    </li>
                    <li>
                      <a
                        href='#login'
                        className='text-muted hover:text-primary transition-colors'
                      >
                        Login
                      </a>
                    </li>
                  </ul>
                </div>

                <div>
                  <h3 className='text-lg font-semibold mb-4 text-primary'>
                    Contact
                  </h3>
                  <div className='space-y-2'>
                    <div className='flex items-center'>
                      <MapPin className='w-4 h-4 mr-2 text-primary' />
                      <span className='text-muted'>
                        123 Main St, Chicago, IL
                      </span>
                    </div>
                    <div className='flex items-center'>
                      <Phone className='w-4 h-4 mr-2 text-primary' />
                      <span className='text-muted'>(555) 123-4567</span>
                    </div>
                    <div className='flex items-center'>
                      <Mail className='w-4 h-4 mr-2 text-primary' />
                      <span className='text-muted'>info@littlelemon.com</span>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className='text-lg font-semibold mb-4 text-primary'>
                    Follow Us
                  </h3>
                  <div className='flex space-x-4'>
                    <a
                      href='#'
                      className='text-muted hover:text-primary transition-colors'
                    >
                      <Facebook className='w-6 h-6' />
                    </a>
                    <a
                      href='#'
                      className='text-muted hover:text-primary transition-colors'
                    >
                      <Instagram className='w-6 h-6' />
                    </a>
                    <a
                      href='#'
                      className='text-muted hover:text-primary transition-colors'
                    >
                      <Twitter className='w-6 h-6' />
                    </a>
                  </div>
                </div>
              </div>

              <div className='border-t border-muted/20 mt-8 pt-8 text-center'>
                <p className='text-muted'>
                  © {new Date().getFullYear()} Little Lemon. All rights
                  reserved.
                </p>
              </div>
            </div>
          </footer>
        </main>
      </SidebarInset>
    </SidebarProvider>
  );
}


============================================================
FILE: src/components/pages/order-online.jsx
============================================================
import { UnderConstruction } from "../re-use/under-construction";

export default function OrderOnlinePage() {
  return (
    <div className='flex items-center justify-center h-screen'>
      <UnderConstruction />
    </div>
  );
}


============================================================
FILE: src/components/pages/reservation.jsx
============================================================
import { useState } from "react";
import {
  Calendar,
  Clock,
  Users,
  PartyPopper,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { AppSidebar } from "@/components/re-use/app-sidebar";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Separator } from "@/components/ui/separator";
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import { submitBooking } from "../api/submitBooking";

export default function ReservationPage() {
  const [formData, setFormData] = useState({
    date: "",
    time: "",
    guests: "",
    occasion: "",
    name: "",
    email: "",
    phone: "",
    specialRequests: "",
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [dialogContent, setDialogContent] = useState({
    success: false,
    title: "",
    message: "",
    reservationId: "",
  });

  const validateForm = () => {
    const newErrors = {};

    if (!formData.date) {
      newErrors.date = "Date is required";
    } else {
      const selectedDate = new Date(formData.date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (selectedDate < today) {
        newErrors.date = "Please select a future date";
      }
    }

    if (!formData.time) {
      newErrors.time = "Time is required";
    }

    if (!formData.guests) {
      newErrors.guests = "Number of guests is required";
    }

    if (!formData.name.trim()) {
      newErrors.name = "Full name is required";
    } else if (formData.name.trim().length < 2) {
      newErrors.name = "Name must be at least 2 characters long";
    }

    if (!formData.email.trim()) {
      newErrors.email = "Email address is required";
    } else {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        newErrors.email = "Please enter a valid email address";
      }
    }

    if (!formData.phone.trim()) {
      newErrors.phone = "Phone number is required";
    } else {
      const phoneRegex = /^[+]?[1-9][\d]{0,15}$/;
      const cleanPhone = formData.phone.replace(/[\s\-()]/g, "");
      if (!phoneRegex.test(cleanPhone) || cleanPhone.length < 10) {
        newErrors.phone = "Please enter a valid phone number";
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    if (validateForm()) {
      try {
        const result = await submitBooking(formData);

        if (result.success) {
          setDialogContent({
            success: true,
            title: "Reservation Confirmed!",
            message: result.message,
            reservationId: result.reservationId,
          });
          setDialogOpen(true);

          setFormData({
            date: "",
            time: "",
            guests: "",
            occasion: "",
            name: "",
            email: "",
            phone: "",
            specialRequests: "",
          });
          setErrors({});
        } else {
          setDialogContent({
            success: false,
            title: "Reservation Failed",
            message: result.message,
            reservationId: "",
          });
          setDialogOpen(true);
        }
      } catch {
        setDialogContent({
          success: false,
          title: "Error",
          message:
            "There was an error submitting your reservation. Please try again.",
          reservationId: "",
        });
        setDialogOpen(true);
      }
    }

    setIsSubmitting(false);
  };

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: "" }));
    }
  };

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <header className='flex h-16 shrink-0 items-center gap-2 border-b bg-background px-4'>
          <SidebarTrigger className='-ml-1' />
          <Separator orientation='vertical' className='mr-2 h-4' />
          <Breadcrumb>
            <BreadcrumbList>
              <BreadcrumbItem className='hidden md:block'>
                <BreadcrumbLink href='#'>Little Lemon</BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator className='hidden md:block' />
              <BreadcrumbItem>
                <BreadcrumbPage>Reservations</BreadcrumbPage>
              </BreadcrumbItem>
            </BreadcrumbList>
          </Breadcrumb>
        </header>

        <main className='flex-1 bg-gradient-to-br from-primary/5 to-secondary/5'>
          <div className='min-h-screen flex items-center justify-center py-8 px-4'>
            <Card className='w-full max-w-4xl mx-auto shadow-2xl border border-border bg-card'>
              <CardHeader className='text-center bg-gradient-to-r from-primary/10 to-secondary/10 border-b'>
                <div className='flex justify-center mb-6'>
                  <div className='flex items-center gap-4 p-4 bg-background rounded-full shadow-lg'>
                    <Calendar className='w-8 h-8 text-primary' />
                    <Clock className='w-8 h-8 text-secondary' />
                    <Users className='w-8 h-8 text-primary' />
                  </div>
                </div>
                <CardTitle className='text-3xl lg:text-4xl font-bold text-foreground mb-2'>
                  Make a Reservation
                </CardTitle>
                <CardDescription className='text-lg text-muted-foreground max-w-2xl mx-auto'>
                  Book your table at Little Lemon and experience authentic
                  Mediterranean cuisine in the heart of Chicago
                </CardDescription>
              </CardHeader>
              <CardContent className='p-6 lg:p-8'>
                <form onSubmit={handleSubmit} className='space-y-8'>
                  <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>
                    <div className='space-y-3'>
                      <Label
                        htmlFor='date'
                        className='text-base font-semibold flex items-center gap-2 text-foreground'
                      >
                        <Calendar className='w-5 h-5 text-primary' />
                        Date
                      </Label>
                      <Input
                        id='date'
                        type='date'
                        value={formData.date}
                        onChange={(e) =>
                          handleInputChange("date", e.target.value)
                        }
                        required
                        className={`h-14 text-lg bg-background border-2 transition-all font-medium px-4 ${
                          errors.date
                            ? "border-destructive focus:border-destructive focus:ring-2 focus:ring-destructive/20"
                            : "border-border focus:border-primary focus:ring-2 focus:ring-primary/20"
                        }`}
                      />
                      {errors.date && (
                        <p className='text-sm text-destructive mt-1'>
                          {errors.date}
                        </p>
                      )}
                    </div>
                    <div className='space-y-3'>
                      <Label
                        htmlFor='time'
                        className='text-base font-semibold flex items-center gap-2 text-foreground'
                      >
                        <Clock className='w-5 h-5 text-secondary' />
                        Time
                      </Label>
                      <Select
                        onValueChange={(value) =>
                          handleInputChange("time", value)
                        }
                        required
                      >
                        <SelectTrigger
                          className={`min-h-14 w-full text-lg bg-background border-2 font-medium px-4 flex items-center transition-all ${
                            errors.time
                              ? "border-destructive focus:border-destructive focus:ring-2 focus:ring-destructive/20"
                              : "border-border focus:border-primary focus:ring-2 focus:ring-primary/20"
                          }`}
                        >
                          <SelectValue placeholder='Select time' />
                        </SelectTrigger>
                        <SelectContent className='bg-background border border-border shadow-xl min-w-[200px]'>
                          <SelectItem
                            value='17:00'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            5:00 PM
                          </SelectItem>
                          <SelectItem
                            value='17:30'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            5:30 PM
                          </SelectItem>
                          <SelectItem
                            value='18:00'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            6:00 PM
                          </SelectItem>
                          <SelectItem
                            value='18:30'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            6:30 PM
                          </SelectItem>
                          <SelectItem
                            value='19:00'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            7:00 PM
                          </SelectItem>
                          <SelectItem
                            value='19:30'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            7:30 PM
                          </SelectItem>
                          <SelectItem
                            value='20:00'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            8:00 PM
                          </SelectItem>
                          <SelectItem
                            value='20:30'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            8:30 PM
                          </SelectItem>
                          <SelectItem
                            value='21:00'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            9:00 PM
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      {errors.time && (
                        <p className='text-sm text-destructive mt-1'>
                          {errors.time}
                        </p>
                      )}
                    </div>
                  </div>

                  <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>
                    <div className='space-y-3'>
                      <Label
                        htmlFor='guests'
                        className='text-base font-semibold flex items-center gap-2 text-foreground'
                      >
                        <Users className='w-5 h-5 text-primary' />
                        Number of Guests
                      </Label>
                      <Select
                        onValueChange={(value) =>
                          handleInputChange("guests", value)
                        }
                        required
                      >
                        <SelectTrigger
                          className={`min-h-14 w-full text-lg bg-background border-2 font-medium px-4 flex items-center transition-all ${
                            errors.guests
                              ? "border-destructive focus:border-destructive focus:ring-2 focus:ring-destructive/20"
                              : "border-border focus:border-primary focus:ring-2 focus:ring-primary/20"
                          }`}
                        >
                          <SelectValue placeholder='Select number of guests' />
                        </SelectTrigger>
                        <SelectContent className='bg-background border border-border shadow-xl min-w-[200px]'>
                          <SelectItem
                            value='1'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            1 Guest
                          </SelectItem>
                          <SelectItem
                            value='2'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            2 Guests
                          </SelectItem>
                          <SelectItem
                            value='3'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            3 Guests
                          </SelectItem>
                          <SelectItem
                            value='4'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            4 Guests
                          </SelectItem>
                          <SelectItem
                            value='5'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            5 Guests
                          </SelectItem>
                          <SelectItem
                            value='6'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            6 Guests
                          </SelectItem>
                          <SelectItem
                            value='7'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            7 Guests
                          </SelectItem>
                          <SelectItem
                            value='8'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            8 Guests
                          </SelectItem>
                          <SelectItem
                            value='8+'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            8+ Guests
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      {errors.guests && (
                        <p className='text-sm text-destructive mt-1'>
                          {errors.guests}
                        </p>
                      )}
                    </div>
                    <div className='space-y-3'>
                      <Label
                        htmlFor='occasion'
                        className='text-base font-semibold flex items-center gap-2 text-foreground'
                      >
                        <PartyPopper className='w-5 h-5 text-secondary' />
                        Occasion
                      </Label>
                      <Select
                        onValueChange={(value) =>
                          handleInputChange("occasion", value)
                        }
                      >
                        <SelectTrigger className='min-h-14 w-full text-lg bg-background border-2 border-border focus:border-primary focus:ring-2 focus:ring-primary/20 font-medium px-4 flex items-center'>
                          <SelectValue placeholder='Select occasion (optional)' />
                        </SelectTrigger>
                        <SelectContent className='bg-background border border-border shadow-xl min-w-[200px]'>
                          <SelectItem
                            value='birthday'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            🎂 Birthday
                          </SelectItem>
                          <SelectItem
                            value='anniversary'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            💕 Anniversary
                          </SelectItem>
                          <SelectItem
                            value='date'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            🌹 Date Night
                          </SelectItem>
                          <SelectItem
                            value='business'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            💼 Business Dinner
                          </SelectItem>
                          <SelectItem
                            value='celebration'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            🎉 Celebration
                          </SelectItem>
                          <SelectItem
                            value='other'
                            className='text-lg py-3 px-4 cursor-pointer'
                          >
                            ✨ Other
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className='space-y-6'>
                    <div className='border-b border-border pb-2'>
                      <h3 className='text-xl font-bold text-foreground'>
                        Contact Information
                      </h3>
                      <p className='text-sm text-muted-foreground mt-1'>
                        We'll use this information to confirm your reservation
                      </p>
                    </div>

                    <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>
                      <div className='space-y-3'>
                        <Label
                          htmlFor='name'
                          className='text-base font-semibold text-foreground'
                        >
                          Full Name *
                        </Label>
                        <Input
                          id='name'
                          type='text'
                          placeholder='Enter your full name'
                          value={formData.name}
                          onChange={(e) =>
                            handleInputChange("name", e.target.value)
                          }
                          required
                          className={`h-14 text-lg bg-background border-2 transition-all font-medium px-4 ${
                            errors.name
                              ? "border-destructive focus:border-destructive focus:ring-2 focus:ring-destructive/20"
                              : "border-border focus:border-primary focus:ring-2 focus:ring-primary/20"
                          }`}
                        />
                        {errors.name && (
                          <p className='text-sm text-destructive mt-1'>
                            {errors.name}
                          </p>
                        )}
                      </div>
                      <div className='space-y-3'>
                        <Label
                          htmlFor='email'
                          className='text-base font-semibold text-foreground'
                        >
                          Email Address *
                        </Label>
                        <Input
                          id='email'
                          type='email'
                          placeholder='Enter your email address'
                          value={formData.email}
                          onChange={(e) =>
                            handleInputChange("email", e.target.value)
                          }
                          required
                          className={`h-14 text-lg bg-background border-2 transition-all font-medium px-4 ${
                            errors.email
                              ? "border-destructive focus:border-destructive focus:ring-2 focus:ring-destructive/20"
                              : "border-border focus:border-primary focus:ring-2 focus:ring-primary/20"
                          }`}
                        />
                        {errors.email && (
                          <p className='text-sm text-destructive mt-1'>
                            {errors.email}
                          </p>
                        )}
                      </div>
                    </div>

                    <div className='space-y-3'>
                      <Label
                        htmlFor='phone'
                        className='text-base font-semibold text-foreground'
                      >
                        Phone Number *
                      </Label>
                      <Input
                        id='phone'
                        type='tel'
                        placeholder='Enter your phone number'
                        value={formData.phone}
                        onChange={(e) =>
                          handleInputChange("phone", e.target.value)
                        }
                        required
                        className={`h-14 text-lg bg-background border-2 transition-all font-medium px-4 ${
                          errors.phone
                            ? "border-destructive focus:border-destructive focus:ring-2 focus:ring-destructive/20"
                            : "border-border focus:border-primary focus:ring-2 focus:ring-primary/20"
                        }`}
                      />
                      {errors.phone && (
                        <p className='text-sm text-destructive mt-1'>
                          {errors.phone}
                        </p>
                      )}
                    </div>
                  </div>

                  <div className='space-y-3'>
                    <Label
                      htmlFor='special-requests'
                      className='text-base font-semibold text-foreground'
                    >
                      Special Requests (Optional)
                    </Label>
                    <Textarea
                      id='special-requests'
                      placeholder='Any dietary restrictions, seating preferences, or special requests...'
                      value={formData.specialRequests}
                      onChange={(e) =>
                        handleInputChange("specialRequests", e.target.value)
                      }
                      className='min-h-[120px] text-lg bg-background border-2 border-border focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all resize-none font-medium px-4 py-3'
                    />
                  </div>

                  <div className='pt-4'>
                    <Button
                      type='submit'
                      size='lg'
                      disabled={isSubmitting}
                      className='w-full h-14 bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none'
                    >
                      {isSubmitting ? "Submitting..." : "Submit Reservation"}
                    </Button>
                    <p className='text-sm text-muted-foreground text-center mt-3'>
                      You'll receive a confirmation email within 24 hours
                    </p>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        </main>
      </SidebarInset>

      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className='sm:max-w-md'>
          <DialogHeader>
            <div className='flex items-center gap-2 mb-2'>
              {dialogContent.success ? (
                <CheckCircle className='h-6 w-6 text-green-500' />
              ) : (
                <XCircle className='h-6 w-6 text-red-500' />
              )}
              <DialogTitle
                className={
                  dialogContent.success ? "text-green-700" : "text-red-700"
                }
              >
                {dialogContent.title}
              </DialogTitle>
            </div>
            <DialogDescription className='text-base'>
              {dialogContent.message}
            </DialogDescription>
            {dialogContent.success && dialogContent.reservationId && (
              <div className='mt-4 p-3 bg-green-50 rounded-lg border border-green-200'>
                <p className='text-sm font-medium text-green-800'>
                  Reservation ID: {dialogContent.reservationId}
                </p>
                <p className='text-xs text-green-600 mt-1'>
                  Please save this ID for your records
                </p>
              </div>
            )}
          </DialogHeader>
          <div className='flex justify-center mt-4'>
            <Button
              onClick={() => setDialogOpen(false)}
              className={`px-6 ${
                dialogContent.success
                  ? "bg-green-600 hover:bg-green-700"
                  : "bg-red-600 hover:bg-red-700"
              }`}
            >
              Close
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </SidebarProvider>
  );
}


============================================================
FILE: src/components/re-use/app-sidebar.jsx
============================================================
import {
  Home,
  Info,
  Menu,
  Calendar,
  ShoppingCart,
  Phone,
  Star,
} from "lucide-react";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarRail,
} from "@/components/ui/sidebar";
import { Link } from "react-router-dom";

const menuItems = [
  {
    title: "Home",
    url: "/",
    icon: Home,
  },
  {
    title: "About",
    url: "#about",
    icon: Info,
    anchor: true,
  },
  {
    title: "Menu",
    url: "#menu",
    icon: Menu,
    anchor: true,
  },
  {
    title: "Reservations",
    url: "/reservations",
    icon: Calendar,
    anchor: false,
  },
  {
    title: "Order Online",
    url: "/order",
    icon: ShoppingCart,
    anchor: false,
  },
];

const quickLinks = [
  {
    title: "Contact Us",
    url: "#contact",
    icon: Phone,
  },
  {
    title: "Reviews",
    url: "#testimonials",
    icon: Star,
  },
];

export function AppSidebar({ ...props }) {
  return (
    <Sidebar variant='inset' {...props}>
      <SidebarHeader>
        <div className='flex items-center gap-3 px-4 py-3'>
          <img
            src='/logo.svg'
            alt='Little Lemon Logo'
            className='w-full pr-12'
          />
        </div>
      </SidebarHeader>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Navigation</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {menuItems.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    {item.anchor ? (
                      <a href={item.url}>
                        <item.icon />
                        <span>{item.title}</span>
                      </a>
                    ) : (
                      <Link to={item.url}>
                        <item.icon />
                        <span>{item.title}</span>
                      </Link>
                    )}
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
        <SidebarGroup>
          <SidebarGroupLabel>Quick Links</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {quickLinks.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <item.icon />
                      <span>{item.title}</span>
                    </a>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
      <SidebarFooter>
        <div className='p-4 text-xs text-sidebar-foreground/70'>
          © 2024 Little Lemon Restaurant
        </div>
      </SidebarFooter>
      <SidebarRail />
    </Sidebar>
  );
}


============================================================
FILE: src/components/re-use/under-construction.jsx
============================================================
import { Construction, AlertTriangle, Home, ArrowLeft } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "../ui/button";
import { Link } from "react-router-dom";

export function UnderConstruction() {
  return (
    <Card className='w-full max-w-md mx-auto border-2 border-primary/20 bg-primary/5'>
      <CardHeader className='text-center'>
        <div className='flex justify-center mb-4'>
          <div className='relative'>
            <Construction className='w-16 h-16 text-primary' />
            <AlertTriangle className='w-6 h-6 text-accent absolute -top-1 -right-1' />
          </div>
        </div>
        <CardTitle className='text-2xl font-bold text-foreground'>
          Under Construction
        </CardTitle>
        <Badge variant='secondary' className='w-fit mx-auto'>
          Coming Soon
        </Badge>
      </CardHeader>
      <CardContent className='text-center'>
        <CardDescription className='text-base'>
          We're working hard to bring you something amazing! This feature will
          be available soon.
        </CardDescription>
      </CardContent>
      <CardFooter className='flex items-center justify-center'>
        <Link to='/'>
          <Button className='flex items-center gap-2 cursor-pointer'>
            <ArrowLeft />
            Go Back
          </Button>
        </Link>
      </CardFooter>
    </Card>
  );
}


============================================================
FILE: src/components/ui/badge.jsx
============================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "span"

  return (
    (<Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props} />)
  );
}

export { Badge, badgeVariants }


============================================================
FILE: src/components/ui/breadcrumb.jsx
============================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

function Breadcrumb({
  ...props
}) {
  return <nav aria-label="breadcrumb" data-slot="breadcrumb" {...props} />;
}

function BreadcrumbList({
  className,
  ...props
}) {
  return (
    (<ol
      data-slot="breadcrumb-list"
      className={cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      )}
      {...props} />)
  );
}

function BreadcrumbItem({
  className,
  ...props
}) {
  return (
    (<li
      data-slot="breadcrumb-item"
      className={cn("inline-flex items-center gap-1.5", className)}
      {...props} />)
  );
}

function BreadcrumbLink({
  asChild,
  className,
  ...props
}) {
  const Comp = asChild ? Slot : "a"

  return (
    (<Comp
      data-slot="breadcrumb-link"
      className={cn("hover:text-foreground transition-colors", className)}
      {...props} />)
  );
}

function BreadcrumbPage({
  className,
  ...props
}) {
  return (
    (<span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("text-foreground font-normal", className)}
      {...props} />)
  );
}

function BreadcrumbSeparator({
  children,
  className,
  ...props
}) {
  return (
    (<li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={cn("[&>svg]:size-3.5", className)}
      {...props}>
      {children ?? <ChevronRight />}
    </li>)
  );
}

function BreadcrumbEllipsis({
  className,
  ...props
}) {
  return (
    (<span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}>
      <MoreHorizontal className="size-4" />
      <span className="sr-only">More</span>
    </span>)
  );
}

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


============================================================
FILE: src/components/ui/button.jsx
============================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    (<Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props} />)
  );
}

export { Button, buttonVariants }


============================================================
FILE: src/components/ui/card.jsx
============================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props} />)
  );
}

function CardHeader({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props} />)
  );
}

function CardTitle({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props} />)
  );
}

function CardDescription({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />)
  );
}

function CardAction({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props} />)
  );
}

function CardContent({
  className,
  ...props
}) {
  return (<div data-slot="card-content" className={cn("px-6", className)} {...props} />);
}

function CardFooter({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props} />)
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


============================================================
FILE: src/components/ui/dialog.jsx
============================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}) {
  return (
    (<DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props} />)
  );
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}) {
  return (
    (<DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}>
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>)
  );
}

function DialogHeader({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props} />)
  );
}

function DialogFooter({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="dialog-footer"
      className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className)}
      {...props} />)
  );
}

function DialogTitle({
  className,
  ...props
}) {
  return (
    (<DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props} />)
  );
}

function DialogDescription({
  className,
  ...props
}) {
  return (
    (<DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />)
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}


============================================================
FILE: src/components/ui/input.jsx
============================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({
  className,
  type,
  ...props
}) {
  return (
    (<input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props} />)
  );
}

export { Input }


============================================================
FILE: src/components/ui/label.jsx
============================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}) {
  return (
    (<LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props} />)
  );
}

export { Label }


============================================================
FILE: src/components/ui/select.jsx
============================================================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}) {
  return (
    (<SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>)
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}) {
  return (
    (<SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}>
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn("p-1", position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1")}>
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>)
  );
}

function SelectLabel({
  className,
  ...props
}) {
  return (
    (<SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props} />)
  );
}

function SelectItem({
  className,
  children,
  ...props
}) {
  return (
    (<SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}>
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>)
  );
}

function SelectSeparator({
  className,
  ...props
}) {
  return (
    (<SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props} />)
  );
}

function SelectScrollUpButton({
  className,
  ...props
}) {
  return (
    (<SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>)
  );
}

function SelectScrollDownButton({
  className,
  ...props
}) {
  return (
    (<SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...props}>
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>)
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}


============================================================
FILE: src/components/ui/separator.jsx
============================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}) {
  return (
    (<SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props} />)
  );
}

export { Separator }


============================================================
FILE: src/components/ui/sheet.jsx
============================================================
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({
  ...props
}) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />;
}

function SheetTrigger({
  ...props
}) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />;
}

function SheetClose({
  ...props
}) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />;
}

function SheetPortal({
  ...props
}) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />;
}

function SheetOverlay({
  className,
  ...props
}) {
  return (
    (<SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props} />)
  );
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}) {
  return (
    (<SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}>
        {children}
        <SheetPrimitive.Close
          className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>)
  );
}

function SheetHeader({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props} />)
  );
}

function SheetFooter({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props} />)
  );
}

function SheetTitle({
  className,
  ...props
}) {
  return (
    (<SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props} />)
  );
}

function SheetDescription({
  className,
  ...props
}) {
  return (
    (<SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />)
  );
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


============================================================
FILE: src/components/ui/sidebar.jsx
============================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";
import { PanelLeftIcon } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

const SidebarContext = React.createContext(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}) {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)



  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback((value) => {
    const openState = typeof value === "function" ? value(open) : value
    if (setOpenProp) {
      setOpenProp(openState)
    } else {
      _setOpen(openState)
    }


    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
  }, [setOpenProp, open])


  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile])


  React.useEffect(() => {
    const handleKeyDown = (event) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault()
        toggleSidebar()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar])



  const state = open ? "expanded" : "collapsed"

  const contextValue = React.useMemo(() => ({
    state,
    open,
    setOpen,
    isMobile,
    openMobile,
    setOpenMobile,
    toggleSidebar,
  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar])

  return (
    (<SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style
            }
          }
          className={cn(
            "group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full",
            className
          )}
          {...props}>
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>)
  );
}

function Sidebar({
  side = "left",
  variant = "sidebar",
  collapsible = "offcanvas",
  className,
  children,
  ...props
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

  if (collapsible === "none") {
    return (
      (<div
        data-slot="sidebar"
        className={cn(
          "bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col",
          className
        )}
        {...props}>
        {children}
      </div>)
    );
  }

  if (isMobile) {
    return (
      (<Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE
            }
          }
          side={side}>
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>)
    );
  }

  return (
    (<div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar">

      <div
        data-slot="sidebar-gap"
        className={cn(
          "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon)"
        )} />
      <div
        data-slot="sidebar-container"
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",

          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
        {...props}>
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm">
          {children}
        </div>
      </div>
    </div>)
  );
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}) {
  const { toggleSidebar } = useSidebar()

  return (
    (<Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn("size-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}>
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>)
  );
}

function SidebarRail({
  className,
  ...props
}) {
  const { toggleSidebar } = useSidebar()

  return (
    (<button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex",
        "in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props} />)
  );
}

function SidebarInset({
  className,
  ...props
}) {
  return (
    (<main
      data-slot="sidebar-inset"
      className={cn(
        "bg-background relative flex w-full flex-1 flex-col",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2",
        className
      )}
      {...props} />)
  );
}

function SidebarInput({
  className,
  ...props
}) {
  return (
    (<Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn("bg-background h-8 w-full shadow-none", className)}
      {...props} />)
  );
}

function SidebarHeader({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props} />)
  );
}

function SidebarFooter({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props} />)
  );
}

function SidebarSeparator({
  className,
  ...props
}) {
  return (
    (<Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn("bg-sidebar-border mx-2 w-auto", className)}
      {...props} />)
  );
}

function SidebarContent({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props} />)
  );
}

function SidebarGroup({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props} />)
  );
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "div"

  return (
    (<Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props} />)
  );
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    (<Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",

        "after:absolute after:-inset-2 md:after:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />)
  );
}

function SidebarGroupContent({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn("w-full text-sm", className)}
      {...props} />)
  );
}

function SidebarMenu({
  className,
  ...props
}) {
  return (
    (<ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn("flex w-full min-w-0 flex-col gap-1", className)}
      {...props} />)
  );
}

function SidebarMenuItem({
  className,
  ...props
}) {
  return (
    (<li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn("group/menu-item relative", className)}
      {...props} />)
  );
}

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:p-0!",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = "default",
  size = "default",
  tooltip,
  className,
  ...props
}) {
  const Comp = asChild ? Slot : "button"
  const { isMobile, state } = useSidebar()

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props} />
  )

  if (!tooltip) {
    return button
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    }
  }

  return (
    (<Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltip} />
    </Tooltip>)
  );
}

function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    (<Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",

        "after:absolute after:-inset-2 md:after:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className
      )}
      {...props} />)
  );
}

function SidebarMenuBadge({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />)
  );
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}) {

  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, [])

  return (
    (<div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}>
      {showIcon && (
        <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width
          }
        } />
    </div>)
  );
}

function SidebarMenuSub({
  className,
  ...props
}) {
  return (
    (<ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />)
  );
}

function SidebarMenuSubItem({
  className,
  ...props
}) {
  return (
    (<li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn("group/menu-sub-item relative", className)}
      {...props} />)
  );
}

function SidebarMenuSubButton({
  asChild = false,
  size = "md",
  isActive = false,
  className,
  ...props
}) {
  const Comp = asChild ? Slot : "a"

  return (
    (<Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />)
  );
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


============================================================
FILE: src/components/ui/skeleton.jsx
============================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    (<div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props} />)
  );
}

export { Skeleton }


============================================================
FILE: src/components/ui/textarea.jsx
============================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({
  className,
  ...props
}) {
  return (
    (<textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props} />)
  );
}

export { Textarea }


============================================================
FILE: src/components/ui/tooltip.jsx
============================================================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}) {
  return (<TooltipPrimitive.Provider data-slot="tooltip-provider" delayDuration={delayDuration} {...props} />);
}

function Tooltip({
  ...props
}) {
  return (
    (<TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>)
  );
}

function TooltipTrigger({
  ...props
}) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}) {
  return (
    (<TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}>
        {children}
        <TooltipPrimitive.Arrow
          className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>)
  );
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


============================================================
FILE: src/hooks/use-mobile.js
============================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange);
  }, [])

  return !!isMobile
}


============================================================
FILE: src/App.jsx
============================================================
import "./App.css";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import HomePage from "./components/pages/home";
import ReservationPage from "./components/pages/reservation";
import OrderOnlinePage from "./components/pages/order-online";

function App() {
  return (
    <Router>
      <Routes>
        <Route path='/' element={<HomePage />} />
        <Route path='/reservations' element={<ReservationPage />} />
        <Route path='/order' element={<OrderOnlinePage />} />
      </Routes>
    </Router>
  );
}

export default App;


============================================================
FILE: src/index.css
============================================================
@import "tailwindcss";
@import "tw-animate-css";

@import "tailwindcss";
@custom-variant dark (&:is(.dark *));

@theme {
  /* Container custom settings are no longer defined via pure theme variables. */
  /* Theme variables for colors: */
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary‑foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary‑foreground));

  /* ...apply same for destructive, muted, accent, popover, card */

  /* Sidebar theme support: */
  --sidebar-primary: hsl(var(--sidebar-primary));
  --sidebar-accent: hsl(var(--sidebar-accent));
  --sidebar-border: hsl(var(--sidebar-border));
  /* etc. */

  /* Brand palettes (Little Lemon & green): add only the `DEFAULT` tone to generate classes: */
  --color-lemon: #fde047;
  --color-green: #22c55e;

  /* Border-radius tokens */
  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  /* Animation tokens */
  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  /* Keyframes */
  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

@layer base {
  :root {
    --background: 48 100% 97%; /* soft warm yellow background */
    --foreground: 39 39% 18%; /* slightly darker for contrast */
    --card: 48 100% 95%;
    --card-foreground: 39 39% 18%;
    --popover: 48 100% 96%;
    --popover-foreground: 39 39% 18%;
    --primary: 50 98% 55%; /* main yellow */
    --primary-foreground: 39 39% 18%;
    --secondary: 142 76% 36%;
    --secondary-foreground: 0 0% 100%;
    --muted: 48 100% 92%;
    --muted-foreground: 39 39% 45%;
    --accent: 50 98% 60%; /* accent yellow */
    --accent-foreground: 39 39% 18%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;
    --border: 48 100% 85%;
    --input: 48 100% 85%;
    --ring: 50 98% 55%;
    --radius: 0.75rem;
    --chart-1: 50 98% 55%;
    --chart-2: 142 76% 36%;
    --chart-3: 39 39% 18%;
    --chart-4: 48 100% 90%;
    --chart-5: 142 50% 60%;

    /* Sidebar colors */
    --sidebar-background: 48 100% 96%;
    --sidebar-foreground: 39 39% 18%;
    --sidebar-primary: 50 98% 55%;
    --sidebar-primary-foreground: 39 39% 18%;
    --sidebar-accent: 48 100% 92%;
    --sidebar-accent-foreground: 39 39% 18%;
    --sidebar-border: 48 100% 85%;
    --sidebar-ring: 50 98% 55%;
  }

  .dark {
    --background: 39 39% 10%; /* deep warm brown */
    --foreground: 50 98% 90%; /* soft yellow for text */
    --card: 39 39% 14%;
    --card-foreground: 50 98% 90%;
    --popover: 39 39% 14%;
    --popover-foreground: 50 98% 90%;
    --primary: 50 98% 55%;
    --primary-foreground: 39 39% 10%;
    --secondary: 142 76% 36%;
    --secondary-foreground: 0 0% 100%;
    --muted: 39 39% 18%;
    --muted-foreground: 50 98% 70%;
    --accent: 50 98% 60%;
    --accent-foreground: 39 39% 10%;
    --destructive: 0 62% 30%;
    --destructive-foreground: 0 0% 98%;
    --border: 39 39% 22%;
    --input: 39 39% 22%;
    --ring: 50 98% 55%;

    /* Sidebar colors for dark mode */
    --sidebar-background: 39 39% 14%;
    --sidebar-foreground: 50 98% 90%;
    --sidebar-primary: 50 98% 55%;
    --sidebar-primary-foreground: 39 39% 10%;
    --sidebar-accent: 39 39% 18%;
    --sidebar-accent-foreground: 50 98% 90%;
    --sidebar-border: 39 39% 22%;
    --sidebar-ring: 50 98% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

:root {
  --sidebar: hsl(0 0% 98%);
  --sidebar-foreground: hsl(240 5.3% 26.1%);
  --sidebar-primary: hsl(240 5.9% 10%);
  --sidebar-primary-foreground: hsl(0 0% 98%);
  --sidebar-accent: hsl(240 4.8% 95.9%);
  --sidebar-accent-foreground: hsl(240 5.9% 10%);
  --sidebar-border: hsl(220 13% 91%);
  --sidebar-ring: hsl(217.2 91.2% 59.8%);
}

.dark {
  --sidebar: hsl(240 5.9% 10%);
  --sidebar-foreground: hsl(240 4.8% 95.9%);
  --sidebar-primary: hsl(224.3 76.3% 48%);
  --sidebar-primary-foreground: hsl(0 0% 100%);
  --sidebar-accent: hsl(240 3.7% 15.9%);
  --sidebar-accent-foreground: hsl(240 4.8% 95.9%);
  --sidebar-border: hsl(240 3.7% 15.9%);
  --sidebar-ring: hsl(217.2 91.2% 59.8%);
}

@theme inline {
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


============================================================
FILE: src/main.jsx
============================================================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


============================================================
FILE: components.json
============================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": false,
  "tailwind": {
    "config": "",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

============================================================
FILE: eslint.config.js
============================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])


============================================================
FILE: jsconfig.app.json
============================================================
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
    // ...
  }
}


============================================================
FILE: jsconfig.json
============================================================
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
    // ...
  }
}


============================================================
FILE: package.json
============================================================
{
  "name": "meta-frontend-capstone",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@tailwindcss/vite": "^4.1.11",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.536.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.7.1",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "tw-animate-css": "^1.3.6",
    "vite": "^7.0.4"
  }
}


============================================================
FILE: README.md
============================================================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.


============================================================
FILE: vite.config.js
============================================================
import path from "path";
import { fileURLToPath } from "url";
import tailwindcss from "@tailwindcss/vite";
import react from "@vitejs/plugin-react";
import { defineConfig } from "vite";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});